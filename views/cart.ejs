<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cart</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css"
      rel="stylesheet"
    />
    <link
      href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"
      rel="stylesheet"
    />
  </head>

  <body class="bg-gray-100 font-sans">
    <nav class="bg-white border-gray-200 dark:bg-gray-900 mb-4">
      <div
        class="max-w-screen-xl flex items-center justify-between mx-auto p-4"
      >
        <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
          <img
            src="/images/electronic-store-logo.svg"
            class="h-8"
            alt="OtronMart Logo"
          />
        </a>

        <div
          class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
          id="navbar-search"
        >
          <ul
            class="flex flex-col p-4 md:p-0 mt-4 font-medium border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700"
          >
            <li>
              <a
                href="/"
                class="block py-2 px-3 text-white bg-blue-700 rounded md:bg-transparent md:text-blue-700 md:p-0 md:dark:text-blue-500"
                aria-current="page"
                >Home</a
              >
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <div class="bg-gray-100 mb-5 font-sans flex justify-center h-screen">
      <div class="w-full max-w-screen-md p-6 bg-white rounded shadow-md">
        <!-- Back button -->
        <a
          href="#"
          onclick="goBack()"
          class="inline-flex items-center mb-5 px-4 py-2 text-base font-medium rounded-md text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
        >
          <svg
            class="h-4 w-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"
            ></path>
          </svg>
          Back
        </a>
        <h1 class="text-2xl font-semibold border-b mb-4">Shopping Cart</h1>

        <div class="overflow-x-auto">
          <table class="w-full">
            <tbody>
              <% products.forEach(element=> { %>

              <!-- Example item -->
              <tr class="border-b mb-4">
                <td class="py-2" style="height: 100px; width: 100px">
                  <img
                    src="<%=  element.productsDetails.images[0] %>"
                    alt="Product Image"
                    class="rounded"
                  />
                </td>
                <td class="py-2">
                  <span class="ml-2 font-semibold block md:inline">
                    <%= element.productsDetails.name %>
                  </span>
                </td>
                <td class="py-2">INR <%= element.productsDetails.price %></td>

                <td class="py-2">
                  <!-- <div
                    class="text-center relative z-10 py-1.5 px-3 rounded-lg text-red-600 hidden"
                    id="errorpopup">
                  </div> -->
                  <p
                    class="relative z-10 text-red-600 hidden error-popup"
                    id="errorpopup_<%= element.products.productId %>"
                  ></p>
                  <div class="flex items-center">
                    <button
                      class="bg-gray-500 text-white px-3 py-2 rounded-l"
                      onclick="updateQuantity(-1, '<%= element.products.productId %>')"
                    >
                      -
                    </button>
                    <input
                      onchange="reloadContent('<%= element.products.productId %>')"
                      type="number"
                      class="quantityInput"
                      id="quantityInput_<%= element.products.productId %>"
                      class="w-16 p-2 border border-gray-300 rounded text-center"
                      style="width: 4rem"
                      value="<%= element.products.quantity %>"
                    />
                    <button
                      class="bg-gray-500 text-white px-3 py-2 rounded-r"
                      onclick="updateQuantity(1, '<%= element.products.productId %>')"
                    >
                      +
                    </button>
                  </div>
                </td>

                <td class="py-2">
                  <button
                    onclick="removeProduct('<%=  element.userId %>','<%= element.products.productId %>')"
                    class="ml-2 text-red-500"
                  >
                    Remove
                  </button>
                </td>
              </tr>
              <% }) %>
              <!-- Repeat the above item block for each item in the cart -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <div class="bg-gray-100 font-sans flex justify-center mb-5">
      <div
        class="w-full max-w-screen-md items-center p-6 bg-white rounded shadow-md"
      >
        <div class="mt-8">
          <div
            id="totalprice"
            class="flex flex-col md:flex-row md:justify-end text-lg font-semibold md:ml-4 mb-2 md:mb-0"
          >
            Total: INR&nbsp;
            <p id="totalAmount"><%-sum %></p>
          </div>
          <div
            id="outOfStockMessage"
            class="text-red-500 align-items-right hidden text-right animate-bounce"
          >
            Some products are out of stock.
          </div>

          <div class="mt-5 flex flex-col md:flex-row md:justify-end">
            <a id="checkoutLink" href="/checkout">
              <button
                id="checkoutButton"
                class="bg-blue-500 text-white px-6 py-3 rounded mt-2 md:mt-0 md:ml-2"
              >
                Checkout
              </button></a
            >
          </div>
        </div>
      </div>
    </div>
    <% products.forEach(order => { %> <% const productDetailsId =
    order.productsDetails._id.toString(); %> <% const stock =
    order.productsDetails.stock %>
    <div class="product" data-product-id="<%= productDetailsId %>"></div>
    <div class="stock" data-stock="<%= stock %>"></div>
    <% }); %>
    <footer class="bg-gray-800 text-white p-4 text-center mt-8">
      <p>
        &copy;
        <script>
          document.write(new Date().getFullYear());
        </script>
        OtronMart E-Commerce. All rights reserved.
      </p>
    </footer>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // console.log("qwer");
        document
          .getElementById("checkoutButton")
          .addEventListener("click", function () {
            // console.log("123");
            // Get stock and quantity
            const stockElement = document.querySelector("[data-stock]");
            const stock = stockElement
              ? parseInt(stockElement.dataset.stock)
              : 0;
            const quantity = parseInt(
              document.querySelector(".quantityInput").value
            );

            // console.log("Stock:", stock);
            // console.log("Quantity:", quantity);

            // Check if quantity is greater than stock
            if (quantity < stock) {
              // console.log("Quantity is less than or equal to stock");
              // // If quantity is less than or equal to stock, enable the button
              // document
              //   .getElementById("checkoutButton")
              //   .removeAttribute("disabled");
              // Hide the out of stock message
              document
                .getElementById("outOfStockMessage")
                .classList.add("hidden");
            } else {
              // console.log("Quantity is greater than stock");
              event.preventDefault();
              // document
              //   .getElementById("checkoutButton")
              //   .setAttribute("disabled");
              // Show the out of stock message
              document
                .getElementById("outOfStockMessage")
                .classList.remove("hidden");
            }
          });
      });

      function goBack() {
        window.history.back();
      }

      function removeProduct(userId, productId) {
        axios
          .delete("/removeProduct", { data: { userId, productId } })
          .then((response) => {
            const Toast = Swal.mixin({
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                  toast.onmouseenter = Swal.stopTimer;
                  toast.onmouseleave = Swal.resumeTimer;
                },
              });
              Toast.fire({
                icon: "success",
                title: "Product Removed From Cart",
              });
            // console.log(response.data.message);
            window.location.reload();
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function updateQuantity(change, productId) {
        const quantityInput = document.getElementById(
          "quantityInput_" + productId
        );
        let currentValue = parseInt(quantityInput.value, 10);
        if (!isNaN(currentValue)) {
          currentValue += change;
          if (currentValue < 1) {
            currentValue = 1;
          }
          quantityInput.value = currentValue;
          reloadContent(productId);
          reloadTotalAmount();
        }
      }

      // function updateQuantityAndReload(productId) {
      //   const quantityInput = document.getElementById("quantityInput_" + productId);
      //   let currentValue = parseInt(quantityInput.value, 10);
      //   if (!isNaN(currentValue) && currentValue >= 1) {
      //     reloadContent(productId);
      //   } else {
      //     // Handle invalid quantity input if needed
      //     console.error("Invalid quantity input");
      //   }
      // }

      function reloadTotalAmount() {
        axios
          .get("/getUpdatedTotalAmount")
          .then((response) => {
            const totalAmountValueElement =
              document.getElementById("totalAmount");
            if (totalAmountValueElement) {
              totalAmountValueElement.textContent =
                response.data.updatedTotalAmount;
            }
          })
          .catch((error) => {
            console.error("Error fetching updated total amount:", error);
          });
      }

      function reloadContent(productId) {
        const quantity = document.getElementById(
          "quantityInput_" + productId
        ).value;

        axios
          .post("/updatequantity", {
            productId,
            quantity,
          })
          .then(function (response) {
            // console.log(response);
            let errorModal = document.getElementById("errorpopup_" + productId);
            errorModal.innerText = "";
            if (response.data.outOfStock) {
              errorModal.innerText = "Product is out of stock.";
              errorModal.classList.remove("hidden");
              return; // Exit the function if the product is out of stock
            }
            // If the product is not out of stock, continue with other actions
            errorModal.classList.add("hidden");
            // Continue with any other actions if needed
          })
          .catch(function (error) {
            console.error("Error fetching data:", error);
            if (error.response?.data) {
              let errorModal = document.getElementById(
                "errorpopup_" + productId
              );
              errorModal.innerText = error.response.data.message;
              errorModal.classList.remove("hidden");
            }
          });
      }
    </script>
  </body>
</html>
